diff --git a/node_modules/react-native-touch-id/TouchID.m b/node_modules/react-native-touch-id/TouchID.m
index da37735..50888b5 100644
--- a/node_modules/react-native-touch-id/TouchID.m
+++ b/node_modules/react-native-touch-id/TouchID.m
@@ -22,14 +22,18 @@ RCT_EXPORT_METHOD(isSupported: (NSDictionary *)options
         
         // No error found, proceed
         callback(@[[NSNull null], [self getBiometryType:context]]);
-    } else if ([passcodeFallback boolValue] && [context canEvaluatePolicy:LAPolicyDeviceOwnerAuthentication error:&error]) {
+    } //else if ([passcodeFallback boolValue] && [context canEvaluatePolicy:LAPolicyDeviceOwnerAuthentication error:&error]) {
         
         // No error
-        callback(@[[NSNull null], [self getBiometryType:context]]);
-    }
+        //callback(@[[NSNull null], [self getBiometryType:context]]);
+    //}
     // Device does not support FaceID / TouchID / Pin OR there was an error!
     else {
         if (error) {
+            if(error.code == LAErrorTouchIDNotEnrolled) {
+                callback(@[RCTMakeError(@"LAErrorTouchIDNotEnrolled", nil, nil)]);
+                return;
+            }
             NSString *errorReason = [self getErrorReason:error];
             NSLog(@"Authentication failed: %@", errorReason);
             
diff --git a/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintAuthModule.java b/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintAuthModule.java
index dc54bab..12ea224 100644
--- a/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintAuthModule.java
+++ b/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintAuthModule.java
@@ -6,6 +6,7 @@ import android.app.KeyguardManager;
 import android.content.Context;
 import android.hardware.fingerprint.FingerprintManager;
 import android.os.Build;
+import android.app.Fragment;
 
 import com.facebook.react.bridge.Callback;
 import com.facebook.react.bridge.LifecycleEventListener;
@@ -20,6 +21,8 @@ public class FingerprintAuthModule extends ReactContextBaseJavaModule implements
 
     private static final String FRAGMENT_TAG = "fingerprint_dialog";
 
+    // fingerprintDialog now is a class instance, so we handle its lifecycle
+    private FingerprintDialog fingerprintDialog;
     private KeyguardManager keyguardManager;
     private boolean isAppActive;
 
@@ -27,7 +30,6 @@ public class FingerprintAuthModule extends ReactContextBaseJavaModule implements
 
     public FingerprintAuthModule(final ReactApplicationContext reactContext) {
         super(reactContext);
-
         reactContext.addLifecycleEventListener(this);
     }
 
@@ -69,6 +71,14 @@ public class FingerprintAuthModule extends ReactContextBaseJavaModule implements
     @ReactMethod
     public void authenticate(final String reason, final ReadableMap authConfig, final Callback reactErrorCallback, final Callback reactSuccessCallback) {
         final Activity activity = getCurrentActivity();
+        // if fingerprintDialog is not null and it has been dismissed on onPause we will show it 
+        if (inProgress && fingerprintDialog != null && activity != null) {
+            // Check if the fragment has not already been called
+            Fragment prevFrag = activity.getFragmentManager().findFragmentByTag(FRAGMENT_TAG);
+            if (prevFrag==null)
+                fingerprintDialog.show(activity.getFragmentManager(), FRAGMENT_TAG);
+            return;
+        }
         if (inProgress || !isAppActive || activity == null) {
             return;
         }
@@ -96,7 +106,7 @@ public class FingerprintAuthModule extends ReactContextBaseJavaModule implements
 
         final DialogResultHandler drh = new DialogResultHandler(reactErrorCallback, reactSuccessCallback);
 
-        final FingerprintDialog fingerprintDialog = new FingerprintDialog();
+        fingerprintDialog = new FingerprintDialog();
         fingerprintDialog.setCryptoObject(cryptoObject);
         fingerprintDialog.setReasonForAuthentication(reason);
         fingerprintDialog.setAuthConfig(authConfig);
@@ -107,7 +117,10 @@ public class FingerprintAuthModule extends ReactContextBaseJavaModule implements
             return;
         }
 
-        fingerprintDialog.show(activity.getFragmentManager(), FRAGMENT_TAG);
+        // Check if the fragment has not been already called
+        Fragment prevFrag = activity.getFragmentManager().findFragmentByTag(FRAGMENT_TAG);
+        if (prevFrag==null)
+            fingerprintDialog.show(activity.getFragmentManager(), FRAGMENT_TAG);
     }
 
     private int isFingerprintAuthAvailable() {
@@ -149,6 +162,9 @@ public class FingerprintAuthModule extends ReactContextBaseJavaModule implements
     @Override
     public void onHostPause() {
         isAppActive = false;
+        // if the fingerprintDialog is showing dismiss it.
+        if (inProgress && fingerprintDialog != null && getCurrentActivity() != null) 
+            fingerprintDialog.dismiss();
     }
 
     @Override
diff --git a/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintDialog.java b/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintDialog.java
index c4876af..a998877 100644
--- a/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintDialog.java
+++ b/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintDialog.java
@@ -34,12 +34,13 @@ public class FingerprintDialog extends DialogFragment implements FingerprintHand
     private String sensorDescription = "";
     private String sensorErrorDescription = "";
     private String errorText = "";
+    private String authenticationFailedText = "Not recognized. Try again.";
 
     @Override
     public void onAttach(Context context) {
         super.onAttach(context);
 
-        this.mFingerprintHandler = new FingerprintHandler(context, this);
+        this.mFingerprintHandler = new FingerprintHandler(context, this, this.authenticationFailedText);
     }
 
     @Override
@@ -153,6 +154,10 @@ public class FingerprintDialog extends DialogFragment implements FingerprintHand
         if (config.hasKey("imageErrorColor")) {
             this.imageErrorColor = config.getInt("imageErrorColor");
         }
+
+        if (config.hasKey("authenticationFailedText")) {
+            this.authenticationFailedText = config.getString("authenticationFailedText");
+        }
     }
 
     public interface DialogResultListener {
diff --git a/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintHandler.java b/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintHandler.java
index 1ae00e6..2eb0983 100644
--- a/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintHandler.java
+++ b/node_modules/react-native-touch-id/android/src/main/java/com/rnfingerprint/FingerprintHandler.java
@@ -14,10 +14,12 @@ public class FingerprintHandler extends FingerprintManager.AuthenticationCallbac
 
     private final FingerprintManager mFingerprintManager;
     private final Callback mCallback;
+    private String mAuthenticationFailedText;
 
-    public FingerprintHandler(Context context, Callback callback) {
+    public FingerprintHandler(Context context, Callback callback, String authenticationFailedText) {
         mFingerprintManager = context.getSystemService(FingerprintManager.class);
         mCallback = callback;
+        mAuthenticationFailedText = authenticationFailedText;
     }
 
     public void startAuth(FingerprintManager.CryptoObject cryptoObject) {
@@ -40,7 +42,7 @@ public class FingerprintHandler extends FingerprintManager.AuthenticationCallbac
 
     @Override
     public void onAuthenticationFailed() {
-        mCallback.onError("Not recognized. Try again.", FingerprintAuthConstants.AUTHENTICATION_FAILED);
+        mCallback.onError(mAuthenticationFailedText, FingerprintAuthConstants.AUTHENTICATION_FAILED);
     }
 
     @Override
diff --git a/node_modules/react-native-touch-id/index.d.ts b/node_modules/react-native-touch-id/index.d.ts
index 797233a..9604b79 100644
--- a/node_modules/react-native-touch-id/index.d.ts
+++ b/node_modules/react-native-touch-id/index.d.ts
@@ -2,12 +2,12 @@ declare module 'react-native-touch-id' {
     /**
      * The supported biometry type
      */
-    type BiometryType = 'FaceID' | 'TouchID';
+    export type BiometryType = 'FaceID' | 'TouchID' | true;
   
     /**
      * Base config to pass to `TouchID.isSupported` and `TouchID.authenticate`
      */
-    interface IsSupportedConfig {
+    export interface IsSupportedConfig {
       /**
        * Return unified error messages
        */
@@ -38,6 +38,10 @@ declare module 'react-native-touch-id' {
        * **Android only** - Text shown next to the fingerprint image after failed attempt
        */
       sensorErrorDescription?: string;
+      /**
+       * Text shown below the fingerprint image when the fingerprint is not recognized
+       */
+      authenticationFailedText?: string;
       /**
        * **Android only** - Cancel button text
        */
